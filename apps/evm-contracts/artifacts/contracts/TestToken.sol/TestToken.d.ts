// This file was autogenerated by hardhat-viem, do not edit it.
// prettier-ignore
// tslint:disable
// eslint-disable
import type { AbiParameterToPrimitiveType, GetContractReturnType } from "@nomicfoundation/hardhat-viem/types";
import "@nomicfoundation/hardhat-viem/types";
import type { Address } from "viem";

export interface TestToken$Type {
  _format: "hh-sol-artifact-1";
  contractName: "TestToken";
  sourceName: "contracts/TestToken.sol";
  abi: [
    {
      inputs: [
        {
          internalType: "address";
          name: "initialOwner";
          type: "address";
        },
      ];
      stateMutability: "nonpayable";
      type: "constructor";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "spender";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "allowance";
          type: "uint256";
        },
        {
          internalType: "uint256";
          name: "needed";
          type: "uint256";
        },
      ];
      name: "ERC20InsufficientAllowance";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "sender";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "balance";
          type: "uint256";
        },
        {
          internalType: "uint256";
          name: "needed";
          type: "uint256";
        },
      ];
      name: "ERC20InsufficientBalance";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "approver";
          type: "address";
        },
      ];
      name: "ERC20InvalidApprover";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "receiver";
          type: "address";
        },
      ];
      name: "ERC20InvalidReceiver";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "sender";
          type: "address";
        },
      ];
      name: "ERC20InvalidSender";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "spender";
          type: "address";
        },
      ];
      name: "ERC20InvalidSpender";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "owner";
          type: "address";
        },
      ];
      name: "OwnableInvalidOwner";
      type: "error";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
      ];
      name: "OwnableUnauthorizedAccount";
      type: "error";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "owner";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "spender";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "Approval";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "previousOwner";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "newOwner";
          type: "address";
        },
      ];
      name: "OwnershipTransferred";
      type: "event";
    },
    {
      anonymous: false;
      inputs: [
        {
          indexed: true;
          internalType: "address";
          name: "from";
          type: "address";
        },
        {
          indexed: true;
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          indexed: false;
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "Transfer";
      type: "event";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "owner";
          type: "address";
        },
        {
          internalType: "address";
          name: "spender";
          type: "address";
        },
      ];
      name: "allowance";
      outputs: [
        {
          internalType: "uint256";
          name: "";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "spender";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "approve";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "account";
          type: "address";
        },
      ];
      name: "balanceOf";
      outputs: [
        {
          internalType: "uint256";
          name: "";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "decimals";
      outputs: [
        {
          internalType: "uint8";
          name: "";
          type: "uint8";
        },
      ];
      stateMutability: "pure";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "amount";
          type: "uint256";
        },
      ];
      name: "mint";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "name";
      outputs: [
        {
          internalType: "string";
          name: "";
          type: "string";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "owner";
      outputs: [
        {
          internalType: "address";
          name: "";
          type: "address";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "renounceOwnership";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [];
      name: "symbol";
      outputs: [
        {
          internalType: "string";
          name: "";
          type: "string";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [];
      name: "totalSupply";
      outputs: [
        {
          internalType: "uint256";
          name: "";
          type: "uint256";
        },
      ];
      stateMutability: "view";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "transfer";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "from";
          type: "address";
        },
        {
          internalType: "address";
          name: "to";
          type: "address";
        },
        {
          internalType: "uint256";
          name: "value";
          type: "uint256";
        },
      ];
      name: "transferFrom";
      outputs: [
        {
          internalType: "bool";
          name: "";
          type: "bool";
        },
      ];
      stateMutability: "nonpayable";
      type: "function";
    },
    {
      inputs: [
        {
          internalType: "address";
          name: "newOwner";
          type: "address";
        },
      ];
      name: "transferOwnership";
      outputs: [];
      stateMutability: "nonpayable";
      type: "function";
    },
  ];
  bytecode: "0x60806040523480156200001157600080fd5b5060405162000b9f38038062000b9f833981016040819052620000349162000129565b80604051806040016040528060098152602001682a32b9ba2a37b5b2b760b91b81525060405180604001604052806002815260200161151560f21b815250816003908162000083919062000200565b50600462000092828262000200565b5050506001600160a01b038116620000c457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000cf81620000d7565b5050620002cc565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200013c57600080fd5b81516001600160a01b03811681146200015457600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200018657607f821691505b602082108103620001a757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001fb57600081815260208120601f850160051c81016020861015620001d65750805b601f850160051c820191505b81811015620001f757828155600101620001e2565b5050505b505050565b81516001600160401b038111156200021c576200021c6200015b565b62000234816200022d845462000171565b84620001ad565b602080601f8311600181146200026c5760008415620002535750858301515b600019600386901b1c1916600185901b178555620001f7565b600085815260208120601f198616915b828110156200029d578886015182559484019460019091019084016200027c565b5085821015620002bc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6108c380620002dc6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b41146101ba578063a9059cbb146101c2578063dd62ed3e146101d5578063f2fde38b1461020e57600080fd5b806370a082311461016e578063715018a6146101975780638da5cb5b1461019f57600080fd5b806323b872dd116100bd57806323b872dd14610137578063313ce5671461014a57806340c10f191461015957600080fd5b806306fdde03146100e4578063095ea7b31461010257806318160ddd14610125575b600080fd5b6100ec610221565b6040516100f99190610736565b60405180910390f35b6101156101103660046107a0565b6102b3565b60405190151581526020016100f9565b6002545b6040519081526020016100f9565b6101156101453660046107ca565b6102cd565b604051600681526020016100f9565b61016c6101673660046107a0565b6102f1565b005b61012961017c366004610806565b6001600160a01b031660009081526020819052604090205490565b61016c610307565b6005546040516001600160a01b0390911681526020016100f9565b6100ec61031b565b6101156101d03660046107a0565b61032a565b6101296101e3366004610828565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61016c61021c366004610806565b610338565b6060600380546102309061085b565b80601f016020809104026020016040519081016040528092919081815260200182805461025c9061085b565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b6000336102c181858561037b565b60019150505b92915050565b6000336102db85828561038d565b6102e685858561040b565b506001949350505050565b6102f961046a565b6103038282610497565b5050565b61030f61046a565b61031960006104cd565b565b6060600480546102309061085b565b6000336102c181858561040b565b61034061046a565b6001600160a01b03811661036f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610378816104cd565b50565b6103888383836001610537565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461040557818110156103f657604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610366565b61040584848484036000610537565b50505050565b6001600160a01b03831661043557604051634b637e8f60e11b815260006004820152602401610366565b6001600160a01b03821661045f5760405163ec442f0560e01b815260006004820152602401610366565b61038883838361060c565b6005546001600160a01b031633146103195760405163118cdaa760e01b8152336004820152602401610366565b6001600160a01b0382166104c15760405163ec442f0560e01b815260006004820152602401610366565b6103036000838361060c565b600580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166105615760405163e602df0560e01b815260006004820152602401610366565b6001600160a01b03831661058b57604051634a1406b160e11b815260006004820152602401610366565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561040557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105fe91815260200190565b60405180910390a350505050565b6001600160a01b03831661063757806002600082825461062c9190610895565b909155506106a99050565b6001600160a01b0383166000908152602081905260409020548181101561068a5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610366565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166106c5576002805482900390556106e4565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161072991815260200190565b60405180910390a3505050565b600060208083528351808285015260005b8181101561076357858101830151858201604001528201610747565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461079b57600080fd5b919050565b600080604083850312156107b357600080fd5b6107bc83610784565b946020939093013593505050565b6000806000606084860312156107df57600080fd5b6107e884610784565b92506107f660208501610784565b9150604084013590509250925092565b60006020828403121561081857600080fd5b61082182610784565b9392505050565b6000806040838503121561083b57600080fd5b61084483610784565b915061085260208401610784565b90509250929050565b600181811c9082168061086f57607f821691505b60208210810361088f57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102c757634e487b7160e01b600052601160045260246000fdfea164736f6c6343000814000a";
  deployedBytecode: "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b41146101ba578063a9059cbb146101c2578063dd62ed3e146101d5578063f2fde38b1461020e57600080fd5b806370a082311461016e578063715018a6146101975780638da5cb5b1461019f57600080fd5b806323b872dd116100bd57806323b872dd14610137578063313ce5671461014a57806340c10f191461015957600080fd5b806306fdde03146100e4578063095ea7b31461010257806318160ddd14610125575b600080fd5b6100ec610221565b6040516100f99190610736565b60405180910390f35b6101156101103660046107a0565b6102b3565b60405190151581526020016100f9565b6002545b6040519081526020016100f9565b6101156101453660046107ca565b6102cd565b604051600681526020016100f9565b61016c6101673660046107a0565b6102f1565b005b61012961017c366004610806565b6001600160a01b031660009081526020819052604090205490565b61016c610307565b6005546040516001600160a01b0390911681526020016100f9565b6100ec61031b565b6101156101d03660046107a0565b61032a565b6101296101e3366004610828565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61016c61021c366004610806565b610338565b6060600380546102309061085b565b80601f016020809104026020016040519081016040528092919081815260200182805461025c9061085b565b80156102a95780601f1061027e576101008083540402835291602001916102a9565b820191906000526020600020905b81548152906001019060200180831161028c57829003601f168201915b5050505050905090565b6000336102c181858561037b565b60019150505b92915050565b6000336102db85828561038d565b6102e685858561040b565b506001949350505050565b6102f961046a565b6103038282610497565b5050565b61030f61046a565b61031960006104cd565b565b6060600480546102309061085b565b6000336102c181858561040b565b61034061046a565b6001600160a01b03811661036f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610378816104cd565b50565b6103888383836001610537565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461040557818110156103f657604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610366565b61040584848484036000610537565b50505050565b6001600160a01b03831661043557604051634b637e8f60e11b815260006004820152602401610366565b6001600160a01b03821661045f5760405163ec442f0560e01b815260006004820152602401610366565b61038883838361060c565b6005546001600160a01b031633146103195760405163118cdaa760e01b8152336004820152602401610366565b6001600160a01b0382166104c15760405163ec442f0560e01b815260006004820152602401610366565b6103036000838361060c565b600580546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166105615760405163e602df0560e01b815260006004820152602401610366565b6001600160a01b03831661058b57604051634a1406b160e11b815260006004820152602401610366565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561040557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105fe91815260200190565b60405180910390a350505050565b6001600160a01b03831661063757806002600082825461062c9190610895565b909155506106a99050565b6001600160a01b0383166000908152602081905260409020548181101561068a5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610366565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166106c5576002805482900390556106e4565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161072991815260200190565b60405180910390a3505050565b600060208083528351808285015260005b8181101561076357858101830151858201604001528201610747565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461079b57600080fd5b919050565b600080604083850312156107b357600080fd5b6107bc83610784565b946020939093013593505050565b6000806000606084860312156107df57600080fd5b6107e884610784565b92506107f660208501610784565b9150604084013590509250925092565b60006020828403121561081857600080fd5b61082182610784565b9392505050565b6000806040838503121561083b57600080fd5b61084483610784565b915061085260208401610784565b90509250929050565b600181811c9082168061086f57607f821691505b60208210810361088f57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102c757634e487b7160e01b600052601160045260246000fdfea164736f6c6343000814000a";
  linkReferences: {};
  deployedLinkReferences: {};
}

declare module "@nomicfoundation/hardhat-viem/types" {
  export function deployContract(
    contractName: "TestToken",
    constructorArgs: [initialOwner: AbiParameterToPrimitiveType<{ name: "initialOwner"; type: "address" }>],
    config?: DeployContractConfig,
  ): Promise<GetContractReturnType<TestToken$Type["abi"]>>;
  export function deployContract(
    contractName: "contracts/TestToken.sol:TestToken",
    constructorArgs: [initialOwner: AbiParameterToPrimitiveType<{ name: "initialOwner"; type: "address" }>],
    config?: DeployContractConfig,
  ): Promise<GetContractReturnType<TestToken$Type["abi"]>>;

  export function sendDeploymentTransaction(
    contractName: "TestToken",
    constructorArgs: [initialOwner: AbiParameterToPrimitiveType<{ name: "initialOwner"; type: "address" }>],
    config?: SendDeploymentTransactionConfig,
  ): Promise<{
    contract: GetContractReturnType<TestToken$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;
  export function sendDeploymentTransaction(
    contractName: "contracts/TestToken.sol:TestToken",
    constructorArgs: [initialOwner: AbiParameterToPrimitiveType<{ name: "initialOwner"; type: "address" }>],
    config?: SendDeploymentTransactionConfig,
  ): Promise<{
    contract: GetContractReturnType<TestToken$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;

  export function getContractAt(
    contractName: "TestToken",
    address: Address,
    config?: GetContractAtConfig,
  ): Promise<GetContractReturnType<TestToken$Type["abi"]>>;
  export function getContractAt(
    contractName: "contracts/TestToken.sol:TestToken",
    address: Address,
    config?: GetContractAtConfig,
  ): Promise<GetContractReturnType<TestToken$Type["abi"]>>;
}
